// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASIMVehicleNamePlate;
import ... tbd ... // TODO Please specify package name.IMESASIMVehicleNamePlateFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASIMVehicleNamePlateFilter;
import ... tbd ... // TODO Please specify package name.MESASIMVehicleNamePlate;

import com.datasweep.compatibility.ui.Time;

/**
 * Generated filter class for application table AS_IM_VehicleNamePlate.
 */
public class MESGeneratedASIMVehicleNamePlateFilter extends ATRowFilter implements IMESGeneratedASIMVehicleNamePlateFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_IM_VehicleNamePlate";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASIMVehicleNamePlateFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASIMVehicleNamePlateFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASIMVehicleNamePlate> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASIMVehicleNamePlate.class);
    }

    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedcapacityContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDCAPACITY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedcapacityEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDCAPACITY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedcapacityNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDCAPACITY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedcapacityStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDCAPACITY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedvoltageContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDVOLTAGE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedvoltageEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDVOLTAGE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedvoltageNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDVOLTAGE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBatteryratedvoltageStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_BATTERYRATEDVOLTAGE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBrandContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_BRAND, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBrandEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BRAND, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBrandNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_BRAND, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forBrandStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_BRAND, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginedisplacementContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEDISPLACEMENT, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginedisplacementEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEDISPLACEMENT, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginedisplacementNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEDISPLACEMENT, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginedisplacementStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEDISPLACEMENT, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginemodelContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginemodelEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginemodelNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forEnginemodelStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_ENGINEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFactoryContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_FACTORY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFactoryEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FACTORY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFactoryNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FACTORY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFactoryStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_FACTORY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFrontaxlemassContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_FRONTAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFrontaxlemassEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FRONTAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFrontaxlemassNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FRONTAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFrontaxlemassStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_FRONTAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFullvehiclenameContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_FULLVEHICLENAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFullvehiclenameEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FULLVEHICLENAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFullvehiclenameNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_FULLVEHICLENAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forFullvehiclenameStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_FULLVEHICLENAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forGvmContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_GVM, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forGvmEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_GVM, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forGvmNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_GVM, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forGvmStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_GVM, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMakemonthlyContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAKEMONTHLY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMakemonthlyEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAKEMONTHLY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMakemonthlyNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAKEMONTHLY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMakemonthlyStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAKEMONTHLY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forManufacturingcountryContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_MANUFACTURINGCOUNTRY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forManufacturingcountryEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MANUFACTURINGCOUNTRY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forManufacturingcountryNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MANUFACTURINGCOUNTRY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forManufacturingcountryStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_MANUFACTURINGCOUNTRY, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMaxenginepowerContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAXENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMaxenginepowerEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAXENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMaxenginepowerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAXENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forMaxenginepowerStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_MAXENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forModeldrivemotorContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_MODELDRIVEMOTOR, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forModeldrivemotorEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MODELDRIVEMOTOR, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forModeldrivemotorNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_MODELDRIVEMOTOR, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forModeldrivemotorStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_MODELDRIVEMOTOR, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPeakmotorpowerContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_PEAKMOTORPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPeakmotorpowerEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_PEAKMOTORPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPeakmotorpowerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_PEAKMOTORPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPeakmotorpowerStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_PEAKMOTORPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPnameContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_PNAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPnameEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_PNAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPnameNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_PNAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPnameStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_PNAME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPowerContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_POWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPowerEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_POWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPowerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_POWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forPowerStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_POWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRdisplacementfueltypeContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_RDISPLACEMENTFUELTYPE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRdisplacementfueltypeEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_RDISPLACEMENTFUELTYPE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRdisplacementfueltypeNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_RDISPLACEMENTFUELTYPE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRdisplacementfueltypeStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_RDISPLACEMENTFUELTYPE, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRearaxlemassContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_REARAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRearaxlemassEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_REARAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRearaxlemassNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_REARAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forRearaxlemassStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_REARAXLEMASS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendstatusEqualTo(Long value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDSTATUS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendstatusGreaterThanOrEqualTo(Long value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameGreaterThanOrEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDSTATUS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendstatusLessThan(Long value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameLessThan(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDSTATUS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendstatusNotEqualTo(Long value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDSTATUS, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendtimeEqualTo(Time value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDTIME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendtimeGreaterThanOrEqualTo(Time value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameGreaterThanOrEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDTIME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendtimeLessThan(Time value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameLessThan(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDTIME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSendtimeNotEqualTo(Time value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENDTIME, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSenginepowerContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSenginepowerEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSenginepowerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forSenginepowerStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_SENGINEPOWER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forTakenumberContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_TAKENUMBER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forTakenumberEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_TAKENUMBER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forTakenumberNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_TAKENUMBER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forTakenumberStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_TAKENUMBER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVehiclemodelContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_VEHICLEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVehiclemodelEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_VEHICLEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVehiclemodelNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_VEHICLEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVehiclemodelStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_VEHICLEMODEL, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVinnoContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVinnoEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVinnoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forVinnoStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forXfacturerContaining(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameContaining(MESGeneratedASIMVehicleNamePlate.COL_NAME_XFACTURER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forXfacturerEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_XFACTURER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forXfacturerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameNotEqualTo(MESGeneratedASIMVehicleNamePlate.COL_NAME_XFACTURER, value);
    }
    @Override
    public IMESASIMVehicleNamePlateFilter forXfacturerStartingWith(String value) throws DatasweepException {
        return (IMESASIMVehicleNamePlateFilter) forColumnNameStartingWith(MESGeneratedASIMVehicleNamePlate.COL_NAME_XFACTURER, value);
    }
}
