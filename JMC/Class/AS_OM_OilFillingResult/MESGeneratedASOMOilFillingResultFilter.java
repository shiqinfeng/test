// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASOMOilFillingResult;
import ... tbd ... // TODO Please specify package name.IMESASOMOilFillingResultFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASOMOilFillingResultFilter;
import ... tbd ... // TODO Please specify package name.MESASOMOilFillingResult;

import com.datasweep.compatibility.ui.Time;

/**
 * Generated filter class for application table AS_OM_OilFillingResult.
 */
public class MESGeneratedASOMOilFillingResultFilter extends ATRowFilter implements IMESGeneratedASOMOilFillingResultFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_OM_OilFillingResult";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASOMOilFillingResultFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASOMOilFillingResultFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASOMOilFillingResult> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASOMOilFillingResult.class);
    }

    @Override
    public IMESASOMOilFillingResultFilter forCyclefaultContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclefaultEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclefaultNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclefaultStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclenoContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclenoEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclenoNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCyclenoStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycleresultContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycleresultEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycleresultNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycleresultStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycletimesContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycletimesEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycletimesNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forCycletimesStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDatetimeEqualTo(Time value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDatetimeGreaterThanOrEqualTo(Time value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameGreaterThanOrEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDatetimeLessThan(Time value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameLessThan(MESGeneratedASOMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDatetimeNotEqualTo(Time value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltadifferpressurebContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltadifferpressurebEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltadifferpressurebNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltadifferpressurebStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltapressurecheckbContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltapressurecheckbEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltapressurecheckbNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forDeltapressurecheckbStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forExpansiontankvolumeiContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forExpansiontankvolumeiEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forExpansiontankvolumeiNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forExpansiontankvolumeiStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forFillingpressurevaluebContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forFillingpressurevaluebEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forFillingpressurevaluebNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forFillingpressurevaluebStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forLocationContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forLocationEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forLocationNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forLocationStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMobileunitnoContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMobileunitnoEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMobileunitnoNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMobileunitnoStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMultimixingvolumeiContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMultimixingvolumeiEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMultimixingvolumeiNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forMultimixingvolumeiStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forPagoilvolumemlContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forPagoilvolumemlEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forPagoilvolumemlNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forPagoilvolumemlStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forProcesstypeContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forProcesstypeEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forProcesstypeNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forProcesstypeStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes1Containing(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes1EqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes1NotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes1StartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes2Containing(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes2EqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes2NotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes2StartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes3Containing(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes3EqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes3NotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes3StartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes4Containing(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes4EqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes4NotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forRes4StartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forSerialnumberContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forSerialnumberEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forSerialnumberNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forSerialnumberStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTemperaturevalueocContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTemperaturevalueocEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTemperaturevalueocNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTemperaturevalueocStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTestairresidualclContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTestairresidualclEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTestairresidualclNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forTestairresidualclStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forUnityContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forUnityEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forUnityNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forUnityStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuum1valuembContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuum1valuembEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuum1valuembNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuum1valuembStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuumcheckvaluembContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuumcheckvaluembEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuumcheckvaluembNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVacuumcheckvaluembStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVinnoContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVinnoEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVinnoNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVinnoStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVolumemassvalueContaining(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASOMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVolumemassvalueEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVolumemassvalueNotEqualTo(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASOMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASOMOilFillingResultFilter forVolumemassvalueStartingWith(String value) throws DatasweepException {
        return (IMESASOMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASOMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
}
