// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASIMHeadlightDetection;
import ... tbd ... // TODO Please specify package name.IMESASIMHeadlightDetectionFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASIMHeadlightDetectionFilter;
import ... tbd ... // TODO Please specify package name.MESASIMHeadlightDetection;


/**
 * Generated filter class for application table AS_IM_Headlight_Detection.
 */
public class MESGeneratedASIMHeadlightDetectionFilter extends ATRowFilter implements IMESGeneratedASIMHeadlightDetectionFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_IM_Headlight_Detection";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASIMHeadlightDetectionFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASIMHeadlightDetectionFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASIMHeadlightDetection> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASIMHeadlightDetection.class);
    }

    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamplzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZfoglamprzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZFOGLAMPRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYL, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYL, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYL, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYL, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYLOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYLOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYLOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensitylokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYLOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYR, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYR, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYR, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYR, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYROK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYROK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYROK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamintensityrokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMINTENSITYROK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlyokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamlzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamryokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZhighbeamrzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZHIGHBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlinenoContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlinenoEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlinenoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlinenoStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlyokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamlzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMLZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRY, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamryokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRYOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZ, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzokContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzokEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZlowbeamrzokStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZLOWBEAMRZOK, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZoverallresultContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZoverallresultEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZoverallresultNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZoverallresultStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZplantContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZplantEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZplantNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZplantStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZvinContaining(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameContaining(MESGeneratedASIMHeadlightDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZvinEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZvinNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMHeadlightDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMHeadlightDetectionFilter forZvinStartingWith(String value) throws DatasweepException {
        return (IMESASIMHeadlightDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMHeadlightDetection.COL_NAME_ZVIN, value);
    }
}
