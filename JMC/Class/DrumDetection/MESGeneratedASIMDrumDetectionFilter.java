// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASIMDrumDetection;
import ... tbd ... // TODO Please specify package name.IMESASIMDrumDetectionFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASIMDrumDetectionFilter;
import ... tbd ... // TODO Please specify package name.MESASIMDrumDetection;


/**
 * Generated filter class for application table AS_IM_DrumDetection.
 */
public class MESGeneratedASIMDrumDetectionFilter extends ATRowFilter implements IMESGeneratedASIMDrumDetectionFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_IM_DrumDetection";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASIMDrumDetectionFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASIMDrumDetectionFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASIMDrumDetection> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASIMDrumDetection.class);
    }

    @Override
    public IMESASIMDrumDetectionFilter forZabsvalveokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZABSVALVEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabsvalveokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZABSVALVEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabsvalveokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZABSVALVEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabsvalveokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZABSVALVEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabswssokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZABSWSSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabswssokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZABSWSSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabswssokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZABSWSSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZabswssokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZABSWSSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZccsokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZCCSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZccsokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZCCSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZccsokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZCCSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZccsokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZCCSOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVEL, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVEL, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVEL, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVEL, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVELOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVELOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVELOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZhornlevelokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZHORNLEVELOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZlinenoContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZlinenoEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZlinenoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZlinenoStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZneokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZNEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZneokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZNEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZneokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZNEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZneokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZNEOK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZoverallresultContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZoverallresultEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZoverallresultNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZoverallresultStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZplantContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZplantEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZplantNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZplantStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETER, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETER, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETER, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETER, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometererrorContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERERROR, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometererrorEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERERROR, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometererrorNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERERROR, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometererrorStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERERROR, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometermeaturevalueContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERMEATUREVALUE, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometermeaturevalueEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERMEATUREVALUE, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometermeaturevalueNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERMEATUREVALUE, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometermeaturevalueStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETERMEATUREVALUE, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerokContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETEROK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerokEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETEROK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETEROK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZspeedometerokStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZSPEEDOMETEROK, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZvinContaining(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameContaining(MESGeneratedASIMDrumDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZvinEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZvinNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMDrumDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMDrumDetectionFilter forZvinStartingWith(String value) throws DatasweepException {
        return (IMESASIMDrumDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMDrumDetection.COL_NAME_ZVIN, value);
    }
}
