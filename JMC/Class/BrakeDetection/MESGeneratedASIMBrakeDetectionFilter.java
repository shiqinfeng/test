// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASIMBrakeDetection;
import ... tbd ... // TODO Please specify package name.IMESASIMBrakeDetectionFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASIMBrakeDetectionFilter;
import ... tbd ... // TODO Please specify package name.MESASIMBrakeDetection;


/**
 * Generated filter class for application table AS_IM_BrakeDetection.
 */
public class MESGeneratedASIMBrakeDetectionFilter extends ATRowFilter implements IMESGeneratedASIMBrakeDetectionFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_IM_BrakeDetection";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASIMBrakeDetectionFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASIMBrakeDetectionFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASIMBrakeDetection> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASIMBrakeDetection.class);
    }

    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforcefaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforcefaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforcefaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforcefaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforceraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforceraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforceraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZbrakeforceraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZfaokContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZFAOK, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZfaokEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZFAOK, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZfaokNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZFAOK, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZfaokStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZFAOK, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockfaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockfaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockfaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockfaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlblockraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBLOCKRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforcefaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforcefaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforcefaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforcefaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforceraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforceraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforceraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlbrakeforceraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlinenoContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlinenoEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlinenoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZlinenoStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLINENO, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadfaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadfaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadfaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadfaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZloadraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZLOADRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforcefaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforcefaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforcefaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforcefaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforceraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforceraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforceraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffbrakeforceraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdifffaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdifffaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdifffaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdifffaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxdiffraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXDIFFRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerfaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerfaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerfaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerfaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZmaxpowerraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZMAXPOWERRA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZoverallresultContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZoverallresultEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZoverallresultNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZoverallresultStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZOVERALLRESULT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZplantContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZplantEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZplantNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZplantStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZPLANT, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrblockfaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrblockfaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrblockfaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrblockfaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBLOCKFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforcefaContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforcefaEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforcefaNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforcefaStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCEFA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforceraContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforceraEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforceraNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZrbrakeforceraStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZRBRAKEFORCERA, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZvinContaining(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameContaining(MESGeneratedASIMBrakeDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZvinEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZvinNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameNotEqualTo(MESGeneratedASIMBrakeDetection.COL_NAME_ZVIN, value);
    }
    @Override
    public IMESASIMBrakeDetectionFilter forZvinStartingWith(String value) throws DatasweepException {
        return (IMESASIMBrakeDetectionFilter) forColumnNameStartingWith(MESGeneratedASIMBrakeDetection.COL_NAME_ZVIN, value);
    }
}
