// CHECKSTYLE:FileLength:off (reason:generated)
// CHECKSTYLE:LineLength:off (reason:generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.DatasweepException;
import com.rockwell.mes.commons.base.ifc.objects.IMESATObjectFilter;

import ... tbd ... // TODO Please specify package name.IMESASIMObdDetection;
import ... tbd ... // TODO Please specify package name.IMESASIMObdDetectionFilter;


/**
 * Generated filter interface for application table AS_IM_ObdDetection.
 * @ftps.exclude 
 */
public interface IMESGeneratedASIMObdDetectionFilter extends IMESATObjectFilter  {

    /**
     * Generated method definition
     *
     * @return the list of the objects
     */
    public List<IMESASIMObdDetection> getFilteredObjects();

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forApassContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forApassEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forApassNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forApassStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCalidContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCalidEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCalidNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCalidStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCvnContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCvnEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCvnNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forCvnStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forJcxtnoContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forJcxtnoEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forJcxtnoNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forJcxtnoStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forModuleidContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forModuleidEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forModuleidNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forModuleidStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forObdContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forObdEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forObdNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forObdStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOdoContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOdoEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOdoNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOdoStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOpassContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOpassEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOpassNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOpassStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOtestdateContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOtestdateEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOtestdateNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forOtestdateStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forResultContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forResultEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forResultNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forResultStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forVinContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forVinEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forVinNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forVinStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZlinenoContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZlinenoEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZlinenoNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZlinenoStartingWith(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZplantContaining(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZplantEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZplantNotEqualTo(String value) throws DatasweepException;
    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException thrown when error occurs
     */
    public IMESASIMObdDetectionFilter forZplantStartingWith(String value) throws DatasweepException;
}
