// CHECKSTYLE:FileLength:off (reason: generated)
// CHECKSTYLE:LineLength:off (reason: generated)
// CHECKSTYLE:MethodLength:off (reason: generated)
package ... tbd ... // TODO Please specify package name;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.ATRowFilter;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import ... tbd ... // TODO Please specify package name.IMESASIMOilFillingResult;
import ... tbd ... // TODO Please specify package name.IMESASIMOilFillingResultFilter;
import ... tbd ... // TODO Please specify package name.IMESGeneratedASIMOilFillingResultFilter;
import ... tbd ... // TODO Please specify package name.MESASIMOilFillingResult;


/**
 * Generated filter class for application table AS_IM_OilFillingResult.
 */
public class MESGeneratedASIMOilFillingResultFilter extends ATRowFilter implements IMESGeneratedASIMOilFillingResultFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AS_IM_OilFillingResult";

    /**
     * Generated constructor
     *
     * @param server The Server object
     */
    public MESGeneratedASIMOilFillingResultFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedASIMOilFillingResultFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESASIMOilFillingResult> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, MESASIMOilFillingResult.class);
    }

    @Override
    public IMESASIMOilFillingResultFilter forCyclefaultContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclefaultEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclefaultNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclefaultStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLEFAULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclenoContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclenoEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclenoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCyclenoStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLENO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycleresultContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycleresultEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycleresultNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycleresultStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLERESULT, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycletimesContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycletimesEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycletimesNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forCycletimesStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_CYCLETIMES, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDatetimeContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDatetimeEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDatetimeNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDatetimeStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_DATETIME, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltadifferpressurebContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltadifferpressurebEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltadifferpressurebNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltadifferpressurebStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_DELTADIFFERPRESSUREB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltapressurecheckbContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltapressurecheckbEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltapressurecheckbNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forDeltapressurecheckbStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_DELTAPRESSURECHECKB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forExpansiontankvolumeiContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forExpansiontankvolumeiEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forExpansiontankvolumeiNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forExpansiontankvolumeiStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_EXPANSIONTANKVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forFillingpressurevaluebContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forFillingpressurevaluebEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forFillingpressurevaluebNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forFillingpressurevaluebStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_FILLINGPRESSUREVALUEB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forLocationContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forLocationEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forLocationNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forLocationStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_LOCATION, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMobileunitnoContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMobileunitnoEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMobileunitnoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMobileunitnoStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_MOBILEUNITNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMultimixingvolumeiContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMultimixingvolumeiEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMultimixingvolumeiNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forMultimixingvolumeiStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_MULTIMIXINGVOLUMEI, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forPagoilvolumemlContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forPagoilvolumemlEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forPagoilvolumemlNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forPagoilvolumemlStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_PAGOILVOLUMEML, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forProcesstypeContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forProcesstypeEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forProcesstypeNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forProcesstypeStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_PROCESSTYPE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes1Containing(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes1EqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes1NotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes1StartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_RES1, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes2Containing(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes2EqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes2NotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes2StartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_RES2, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes3Containing(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes3EqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes3NotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes3StartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_RES3, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes4Containing(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes4EqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes4NotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forRes4StartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_RES4, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forSerialnumberContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forSerialnumberEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forSerialnumberNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forSerialnumberStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_SERIALNUMBER, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTemperaturevalueocContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTemperaturevalueocEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTemperaturevalueocNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTemperaturevalueocStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_TEMPERATUREVALUEOC, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTestairresidualclContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTestairresidualclEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTestairresidualclNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forTestairresidualclStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_TESTAIRRESIDUALCL, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forUnityContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forUnityEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forUnityNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forUnityStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_UNITY, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuum1valuembContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuum1valuembEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuum1valuembNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuum1valuembStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUM1VALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuumcheckvaluembContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuumcheckvaluembEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuumcheckvaluembNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVacuumcheckvaluembStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_VACUUMCHECKVALUEMB, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVinnoContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVinnoEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVinnoNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVinnoStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_VINNO, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVolumemassvalueContaining(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameContaining(MESGeneratedASIMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVolumemassvalueEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVolumemassvalueNotEqualTo(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameNotEqualTo(MESGeneratedASIMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
    @Override
    public IMESASIMOilFillingResultFilter forVolumemassvalueStartingWith(String value) throws DatasweepException {
        return (IMESASIMOilFillingResultFilter) forColumnNameStartingWith(MESGeneratedASIMOilFillingResult.COL_NAME_VOLUMEMASSVALUE, value);
    }
}
