importSubroutine("MES_Common_UI")
importSubroutine ("MES_Common_Base")
importSubroutine ("MES_Common_Time")
importSubroutine("MES_Common_Configuration")
importSubroutine ("MES_Common_Grid-2.0")
importSubroutine("MES_Common_Grid")
importSubroutine ("MES_WM_Common")
importSubroutine ("ra_errorHandling")
importSubroutine ("MES_Common_Log")
importSubroutine ("MES_Common_Constant")
importSubroutine("MES_Common_ChoiceList")
importSubroutine("MES_Common_Privilege")
import("com.rockwell.autosuite.mes.utilities.common.TimeHelper")
//非报工点颜色
COLOR_UNREOPRT = class com.datasweep.compatibility.ui.Color(220,220,220)
COLOR_STEPCLOSE = class com.datasweep.compatibility.ui.Color(255,69,0)
DEFAULT_OBJ = "DEFAULT_OBJ"
GRIDHEADERLABELTEXTTYPE = 1
FORM_MODULE = MODULE_OM
//主工单
SQL_FIXED =  "

select '',wo.order_number, plan_number_S,part_number_S,production_line_f_s,production_line_T_s,  plan_qty_F,route_names_S,order_type_I,order_status_I,
(SUBSTRING(CONVERT(nvarchar, plan_start_time_T, 120), 1, 13))plan_start_time_T,
(SUBSTRING(CONVERT(nvarchar,plan_finish_time_T, 120), 1, 13))plan_finish_time_T,actual_qty_F,
(SUBSTRING(CONVERT(nvarchar,actual_start_time_T, 120), 1, 13))actual_start_time_T ,(SUBSTRING(CONVERT(nvarchar, closed_time, 120), 1, 13)) closed_time,workblank_qty_F,scrap_qty_F,(SUBSTRING(CONVERT(nvarchar,creation_time, 120), 1, 19)) creation_time,create_name_S,remark_S from   UDA_Order  uda
left  join   WORK_ORDER  wo  on  wo.order_key = uda.object_key

where 1=1 

"
//工序工单
SQL_OrderDay = " 
	     	 		  
		   select '' ,itm.plan_number_S,wis.order_item,itm.p_line_key_S ,wis.planned_route,WIS.planned_route_key,itm.work_center_S ,itm.route_step_key_I,itm.order_type_I,wis.part_number,wis.bom_name,wis.bom_revision  ,
			  (SUBSTRING(CONVERT(nvarchar, wis.planned_start_time, 120), 1, 13))planned_start_time,(SUBSTRING(CONVERT(nvarchar, wis.planned_finish_time, 120), 1, 13))planned_finish_time,(SUBSTRING(CONVERT(nvarchar,itm.actual_start_time_T, 120), 1, 13))actual_start_time_T,(SUBSTRING(CONVERT(nvarchar, itm.actual_finish_time_T, 120), 1, 13))actual_finish_time_T,itm.order_status_I,cast(Wis.quantity_ordered as decimal) quantity_ordered,cast(Wis.quantity_finished as decimal)quantity_finished,
			  (SUBSTRING(CONVERT(nvarchar, wis.last_modified_time, 120), 1, 19))last_modified_time,itm.created_by_S,itm.created_by_desc_S,(SUBSTRING(CONVERT(nvarchar,Wis.creation_time, 120), 1, 19))creation_time,
			  (SUBSTRING(CONVERT(nvarchar, wis.finished_time, 120), 1, 13))finished_time,itm.remark_S,itm.seq_number_I,itm.report_flag_I,itm.last_report_flag_I,itm.pre_route_step_key_I,next_step_key_I
			  from   UDA_OrderItem itm
			 left join WORK_ORDER_ITEMS Wis on itm.object_key = Wis.order_item_key
			 left join WORK_ORDER Wo on Wo.order_key = Wis.order_key
			 where 1=1  
"

function frmInitGrid()
{

    glbInitGrid(activityGridResult)
    glbSetGridHeaderLabelText(activityGridResult, 2, labelTotalResult)  
    glbSetGridHeaderLabelText(activityGridResultDay, 2, labelTotalResultDay)  

}

function frmInitForm()
{
//     initEnvironment()
    //=====Start Customization=======================================================================
    //=====End Customization===========================================================================
    frmReset()
    frmResetDay()
    frmInitGrid()
//     initComboboxArea(comboboxArea)
//     initcomboboxSite()

    
}
function frmReset()
{
    resetAllControlValues(groupboxQueryCondition)
}
function frmResetDay()
{
    resetAllControlValues(groupboxOrderDay)
}
function frmQuery()
{
    //exception handle
    function handleException(exception)
    {
        //reminder message
        handleErrorMsg("MES_MAINFROM_MSG_TRX", "QUERY_EXCEPTION", null, null,null, HANDLER_OPTION_DEFAULT, null)
        
        //print StackOverflowError
        logException(FORM_MODULE, exception)
        //log 
        logError(FORM_MODULE, exception.getMessage(), createTime(), "Form:" + getActiveDsForm().getName(), "Function:frmQuery()")
    }
        // 物料编码
        partnumber = editMaterialCode.getText().trim()
        //主工单类型
        OrderType = activityControlOrderType.getChoiceValue()
        //产品型号
        Productnumber = editProductnumber.getText().trim()
        //主工单状态
        OrderState = activityControlOrderState.getChoiceValue()
        //主工单编码
        OrderNo = editOrderNo.getText().trim().toString()
        //产线
        Pline = comboboxProductionLine.getSelectedItem() 
        //工艺路线  
        route_name = editroutes.getText().trim()
   sql = SQL_FIXED
    if(!isEmptyStr(partnumber))
    {
        sql += " and part_number_S like '%"+ partnumber +"%'"
    }
    if(!isEmptyStr(OrderType))
    {
        sql += " and order_type_I = N'"+ OrderType +"'"
    }
    if(!isEmptyStr(Productnumber))
    {
        sql += " and part_number_S like '%"+ Productnumber +"%'"
    }
    if(!isEmptyStr(OrderState))
    {
        sql += " and order_status_I = N'"+ OrderState +"'"
    }
    if(!isEmptyStr(OrderNo))
    {
        sql += " and Wo.order_number like '%"+ OrderNo +"%'"
    }
    if(!isEmptyStr(Pline))
    {
        sql += " and Ud.product_line_S = N'"+ Pline.toString() +"'"
    }  
//     
    if(!isEmptyStr(route_name))
    {
        sql += " and route_names_S like '%"+ route_name +"%'"
    }
    if(dateTimePickerPlanStatTimeFrom.getShowNoneIsChecked())
    {
        inTimeForm = dateTimePickerPlanStatTimeFrom.getValue()
        inTimeFormStr = formatTimeByDateFormat(inTimeForm, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_start_time_T >= ('" + inTimeFormStr + "') "
    }
    if(dateTimePickerPlanStatTimeTo.getShowNoneIsChecked())
    {
        inTimeTo = dateTimePickerPlanStatTimeTo.getValue()
        inTimeToStr = formatTimeByDateFormat(inTimeTo, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_start_time_T <= ('" + inTimeToStr + "') "
    }
//     
      if(dateTimePickerFinishTimeFrom.getShowNoneIsChecked())
    {
        inTimeForm =dateTimePickerFinishTimeFrom.getValue()
        inTimeFormStr = formatTimeByDateFormat(inTimeForm, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_finish_time_T >= ('" + inTimeFormStr + "') "
    }
    if(dateTimePickerFinishTimeTo.getShowNoneIsChecked())
    {
        inTimeTo = dateTimePickerFinishTimeTo.getValue()
        inTimeToStr = formatTimeByDateFormat(inTimeTo, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_finish_time_T <= ('" + inTimeToStr + "') "
    } 
    vectorData = querySql(sql+ " order by  wo.creation_time")
    displayGridResult(vectorData,activityGridResult)
}
function displayGridResult(vectorData,activityGridResult)
   {
    activityGridResult.clearGrid()
    activityGridResult.setNumberOfRows(0)
   
    for(i=0; i<vectorData.size(); i++)
    {
        obj = vectorData.get(i)        
        activityGridResult.setCellText(i,0,null)
        activityGridResult.setCellText(i,1,i+1)
        activityGridResult.setCellText(i,2,obj[1])
        activityGridResult.setCellText(i,3,obj[2])
        activityGridResult.setCellText(i,4,obj[3])
        activityGridResult.setCellText(i,5,obj[4])
        activityGridResult.setCellText(i,6,obj[5])
        activityGridResult.setCellText(i,7,obj[6])
        activityGridResult.setCellText(i,8,obj[7])
        activityGridResult.setCellText(i,9,obj[8])
        activityGridResult.setCellText(i,10,obj[9])
		activityGridResult.setCellText(i,11,obj[10])
		activityGridResult.setCellText(i,12,obj[11])
		activityGridResult.setCellText(i,13,obj[12])
        activityGridResult.setCellText(i,14,obj[13])
		activityGridResult.setCellText(i,15,obj[14])
		activityGridResult.setCellText(i,16,obj[15])
		activityGridResult.setCellText(i,17,obj[16])
		activityGridResult.setCellText(i,18,obj[17])
	    activityGridResult.setCellText(i,19,obj[18])
		activityGridResult.setCellText(i,20,obj[19])
		activityGridResult.setRowObject(i,obj)
	
    }
       activityGridResult.resizeColumnsToFit()
    //生成复选框.getGrid()
      setGridWithCheckbox(activityGridResult)
//       setMessageDescToGrid(activityGridResult,vectorData,9,"OM_OrderType")
//       setMessageDescToGrid(activityGridResult,vectorData,10,"OM_OrderStatus")
      glbSetGridHeaderLabelText(activityGridResult, GRIDHEADERLABELTEXTTYPE, labelTotalResult)
//         frmRowSelectQuery()
}


//计划生成工单

function frmPlanCreatrOrder()
{
    form = getForm("MES_OM_PlanCreatOrder")
    if(form != null)
    {
        showAsDialog(form)        
    }
   
   frmQuery()
}

function  frmaddOrder()
{

            function handleException(exception)
            {
                //prompt message
                handleErrorMsg("MES_MAINFROM_MSG_TRX", "SAVE_EXCEPTION", null, null,null, HANDLER_OPTION_DEFAULT, null)
                //print StackOverflowError
                logException(FORM_MODULE, exception)
                logError(FORM_MODULE, exception.getMessage(), getDBTime(), "Form:" + getActiveDsForm().getName(), "Function:frmSave()")
            }
//             catch(Exception, handleException)  
            //=====Start Customization=======================================================================
            form = getForm("MES_OM_AddPlanCreatOrder3.2")
            if(form != null)
            {
                showAsDialog(form)
                defaultObj = getFormProperty(form, DEFAULT_OBJ)             
            } 
  frmQuery()

}


function  frmOrderchange()
{
   rows = activityGridResult.getNumberOfRows()    
   if(rows == 0)
   {
      dialogError("请选择一行记录！")
      return
   }
   
      for(i=0;i<rows;i++)
       {
       checked = activityGridResult.getCellObject(i, 0)
  
           if(checked == false)
           {
               continue
           }else
           {    
            form = getForm("MES_OM_AddPlanCreatOrder3.2")
                if(form != null)
                {
//                 Order_number = activityGridResult.getCellText(i,2)
                array = activityGridResult.getSelectedRowObject()
                Order_number = array[1]
                defaultObj = getWorkOrder(Order_number)
                //工单号
                defaultObj.setOrderNumber(array[1])
                //主计划
                defaultObj.setUDA(array[2],"plan_number")
                //物料编码
                defaultObj.setUDA(array[3],"part_number")
                //发出车间
                defaultObj.setUDA(array[4],"production_line_f")
                //接收车间
                defaultObj.setUDA(array[5],"production_line_t")
                //计划数量
                defaultObj.setUDA(array[6],"plan_qty")
                //工艺路线
                defaultObj.setUDA(array[7],"route_names") 
                // 工单类型
                defaultObj.setUDA(array[8],"order_type")
                //共单状态
                defaultObj.setUDA(array[9],"order_status")
                //计划开始时间
                start_Time = class com.ftpc.common.utilities.TimeHelper::stringToTime(array[10],"yyyy-MM-dd HH")
                finsih_time = class com.ftpc.common.utilities.TimeHelper::stringToTime(array[11],"yyyy-MM-dd HH")
                defaultObj.setUDA(start_Time,"plan_start_time")
                //计划完成时间
                defaultObj.setUDA(finsih_time,"plan_finish_time")
                //备注
                defaultObj.setUDA(array[19],"remark")
                setFormProperty(form,DEFAULT_OBJ,defaultObj)
                closeFlag = showAsDialog(form) 
               
                }      
            }
        }
        frmQuery()
}



function initcomboboxSite()
{
items = createArray(4)
items = [" ","宁波东睦", "广州东睦", "山西东睦"]
comboboxSite.setItems(items)
}

function CreateOrderDay()
{
   rows = activityGridResult.getNumberOfRows()   
   if(rows == 0)
   {
      dialogError("请选择一行记录！")
      return
   }
   //判断主工单是否生产 ，生成则提示已生成
   for(x=0 ; x<rows;x++)
   {
       checked = activityGridResult.getCellObject(x, 0)
       if(checked == false)
       {
           continue
       }else
       {      
           OrderNo = activityGridResult.getCellText(x,2)  
           orderState =   activityGridResult.getCellText(x,12)  
           if (orderState=="已生成")
           { 
               dialogError("工单"+ OrderNo+"已生成，请选择其他工单")
               return
           }
        }
    }
   
   
       for(i=0;i<rows;i++)
       {
       checked = activityGridResult.getCellObject(i, 0)
       if(checked == false){
           continue
       }
         
       OrderNo = activityGridResult.getCellText(i,2)  
       OrderObj = getWorkOrder(OrderNo)   
       OrderQuery = Long(activityGridResult.getCellText(i,4))
       //获取选择工单的产品编号
       productNo = activityGridResult.getCellText(i,23)
       
       MAX = "Select max_I from AT_OM_ProductMAX where 1=1 "
       sqlMAX = MAX + "and productno_S =" + "'"+ productNo +"'"
       //判断产品型号是否存在    
       ProductMAXArray = querySql(sqlMAX)
        if(ProductMAXArray.size()==0)
       {
            dialogError("产品型号"+ productNo+"不存在")
               return
       }
        //获取产品最大产能
       ProductMAX = ProductMAXArray.get(0)[0]
//        Day =  OrderQuery/Long(ProductMAX)
       //计算出需要生成的天数 用进一法 不够一天的按一天计算
       Day =  ((double)OrderQuery)/Long(ProductMAX)
       //不够一天按一天算
       CountDay = int(ceil(Day))
   
       for(j=0 ;j<CountDay;j++)
       {
                
       OrderDay_number = getSeqNumber(OrderNo)
       handlerDay = createOrderItem()
       handlerDay.setOrderItem(OrderDay_number)
       //工厂
        handlerDay.setUDA(activityGridResult.getCellText(i,22),"site")
        //车间
        handlerDay.setUDA(activityGridResult.getCellText(i,5),"work_shop")
        //产线
        handlerDay.setUDA(activityGridResult.getCellText(i,6),"product_line")
        //工单号
        handlerDay.setUDA(activityGridResult.getCellText(i,2),"order_number")
        //物料编号
        handlerDay.setUDA(activityGridResult.getCellText(i,3),"semi_productcode")
        //计划数量
        handlerDay.setUDA(Long(ProductMAX),"plan_quantity")
        //工艺路线
        handlerDay.setUDA(activityGridResult.getCellText(i,7),"work_center")
        //设备组
        handlerDay.setUDA(activityGridResult.getCellText(i,21),"workclass")
        //机台
        handlerDay.setUDA(activityGridResult.getCellText(i,8),"equipment")
        //工单类型
        handlerDay.setUDA(activityGridResult.getCellText(i,9),"order_type")
        //产品型号
        handlerDay.setUDA(activityGridResult.getCellText(i,23),"product_number")
        //工单状态
        //                handlerDay.setUDA(activityGridResult.getCellText(i,12),"order_state")
        //完成数量
        handlerDay.setUDA(activityGridResult.getCellText(i,18),"finish_quantity")
        //备注
        handlerDay.setUDA(activityGridResult.getCellText(i,21),"remarks")
        //计划开始时间默认排第二天零点
        Plan_starttime = date(formatDateTime(addDay(date(), j+1), "yyyy/MM/dd 00:00:00"),"yyyy/MM/dd 00:00:00")
        Plan_starttime1 = addDay(date(), j+1)
        handlerDay.setUDA(Plan_starttime,"plan_starttime")
        //默认第三天零点
        finishtime = date(formatDateTime(addDay(date(), j+2), "yyyy/MM/dd 00:00:00"),"yyyy/MM/dd 00:00:00")
//         finishtime = addDay(date(), j+2)
        handlerDay.setUDA(finishtime,"plan_finishtime")
        //实际开始实际
        //实际完成时间
        handlerDay.setUDA(activityGridResult.getCellText(i,18),"realiy_b")
        handlerDay.setUDA(activityGridResult.getCellText(i,19),"realiy_e")          
        OrderObj.addOrderItem(handlerDay)           
        OrderObj.setUDA(Long(2),"order_state")
        OrderObj.save() 
       }
     
   }  
   frmQuery()
   QueryOrderDay()

}


//工序工单
//判断主单是否选中
function  frmRowSelectQuery()
{
 rows = activityGridResult.getNumberOfRows()   
   if(rows == 0)
   {
   // 未选中则给editOrder赋值为空
     editOrder =  editOrder.getText().trim()
   }else{
       for(i=0;i<rows;i++)
           {
           checked = activityGridResult.getCellObject(i, 0)
           if(checked == false){
               continue
           }else
           {
             //选中 把查询的结果赋值给editorder
//               key = activityGridResult.getCellText(i,21)  
              orderNo = activityGridResult.getCellText(i,2)
              editOrder.setText(orderNo)
                   
           }
         }
   }  
  QueryOrderDay()
}
//查询日工单
function QueryOrderDay()
{
    //exception handle
    function handleException(exception)
    {
        //reminder message
        handleErrorMsg("MES_MAINFROM_MSG_TRX", "QUERY_EXCEPTION", null, null,null, HANDLER_OPTION_DEFAULT, null)
        
        //print StackOverflowError
        logException(FORM_MODULE, exception)
        //log 
        logError(FORM_MODULE, exception.getMessage(), createTime(), "Form:" + getActiveDsForm().getName(), "Function:frmQuery()")
    }
    // 主工单号
    order =  editOrder.getText().trim()     
    sql = SQL_OrderDay
    if(!isEmptyStr(order))
    {
        sql += " and Wo.order_number like '%"+ order +"%'"
    }
    if(dateTimePickerPlanStatDayTimeFrom.getShowNoneIsChecked())
    {
        inTimeForm = dateTimePickerPlanStatDayTimeFrom.getValue()
        inTimeFormStr = formatTimeByDateFormat(inTimeForm, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_starttime_T >= ('" + inTimeFormStr + "') "
    }
    if(dateTimePickerPlanStatTimeTo.getShowNoneIsChecked())
    {
        inTimeTo = dateTimePickerPlanStatTimeTo.getValue()
        inTimeToStr = formatTimeByDateFormat(inTimeTo, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_starttime_T <= ('" + inTimeToStr + "') "
    }   
    if(dateTimePickerFinishTimeDayFrom.getShowNoneIsChecked())
    {
        inTimeForm =dateTimePickerFinishTimeDayFrom.getValue()
        inTimeFormStr = formatTimeByDateFormat(inTimeForm, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_finishtime_T >= ('" + inTimeFormStr + "') "
    }
    if(dateTimePickerFinishTimeDayTo.getShowNoneIsChecked())
    {
        inTimeTo = dateTimePickerFinishTimeDayTo.getValue()
        inTimeToStr = formatTimeByDateFormat(inTimeTo, "yyyy-MM-dd HH:mm:ss")
        sql += " and plan_finishtime_T <= ('" + inTimeToStr + "') "
    } 
    vectorData = querySql(sql + " order by creation_time ")
    displayGridResult1Day(vectorData,activityGridResultDay)
}
function displayGridResult1Day(vectorData,activityGridResultDay)
{
activityGridResultDay.clearGrid()
activityGridResultDay.setNumberOfRows(0)
for(i=0; i<vectorData.size(); i++)
{
    obj = vectorData.get(i)
    
    activityGridResultDay.setCellText(i,0,null)
    activityGridResultDay.setCellText(i,1,i+1)
    activityGridResultDay.setCellText(i,2,obj[1])
    activityGridResultDay.setCellText(i,3,obj[2])
    if(obj[3] == null)
    {
        pline = null
    }else
    {
        pline = getProductionLineByKey(Long(obj[3]))
    }
    activityGridResultDay.setCellText(i,4,pline)
    activityGridResultDay.setCellText(i,5,obj[4])
    activityGridResultDay.setCellText(i,6,obj[5])
    activityGridResultDay.setCellText(i,7,obj[6])
    step = getRoute(obj[4]).getStep(Long(obj[7]))
    op = step.getOperation().getName()
    opdesc = step.getOperation().getDescription()
    activityGridResultDay.setCellText(i,8,opdesc+op)
    activityGridResultDay.setCellText(i,9,obj[8])
    activityGridResultDay.setCellText(i,10,obj[9])
	activityGridResultDay.setCellText(i,11,obj[10])
	activityGridResultDay.setCellText(i,12,obj[11])
	activityGridResultDay.setCellText(i,13,obj[12])
    activityGridResultDay.setCellText(i,14,obj[13])
	activityGridResultDay.setCellText(i,15,obj[14])
	activityGridResultDay.setCellText(i,16,obj[15])
	activityGridResultDay.setCellText(i,17,obj[16])
    activityGridResultDay.setCellText(i,18,obj[17])
	activityGridResultDay.setCellText(i,19,obj[18])
	activityGridResultDay.setCellText(i,20,obj[19])
	activityGridResultDay.setCellText(i,21,obj[20])
	activityGridResultDay.setCellText(i,22,obj[21])
	activityGridResultDay.setCellText(i,23,obj[22])
	activityGridResultDay.setCellText(i,24,obj[23])
	activityGridResultDay.setCellText(i,25,obj[24])
	activityGridResultDay.setCellText(i,26,obj[25])
	activityGridResultDay.setCellText(i,27,obj[26])
	activityGridResultDay.setCellText(i,28,obj[27])
	if(Long(obj[28])==0 )
	{
	  activityGridResultDay.setCellText(i,29,null) 
	}else
	{
    	step = getRoute(obj[4]).getStep(Long(obj[28]))
        op = step.getOperation().getName()
        opdesc = step.getOperation().getDescription()
    	activityGridResultDay.setCellText(i,29,opdesc+op)
	}
	if(Long(obj[29]) ==0)
	{
	  activityGridResultDay.setCellText(i,30,null)
	}else
	{
    	step = getRoute(obj[4]).getStep(Long(obj[29]))
        op = step.getOperation().getName()
        opdesc = step.getOperation().getDescription()
    	activityGridResultDay.setCellText(i,30,opdesc+op)
	}
	activityGridResultDay.setRowObject(i,obj)
}
   activityGridResultDay.resizeColumnsToFit()
//生成复选框
  setGridWithCheckbox(activityGridResultDay)
  glbSetGridHeaderLabelText(activityGridResultDay, GRIDHEADERLABELTEXTTYPE,labelTotalResultDay )  
  changecolor(vectorData)
}


function initComboboxWorkCenter(productionLine){
    
    comboboxWorkCenter.removeAll()
    comboboxWorkCenter.setEnabled(false)
    if(productionLine == null) 
        return
    vectorWorkCenter = productionLine.getWorkCenters()
    size = 0
    foreach workCenter(vectorWorkCenter)
    {
        if(workCenter.getUDA("type") == null || workCenter.getUDA("type").equals("PC"))
        {
            size += 1
        }
    }
    
    if(size > 0){
        comboboxWorkCenter.setEnabled(true)
        vectorWorkCenter.add(0, null)
        comboboxWorkCenter.setItems(vectorWorkCenter.toArray())
    }
}

function workcenterSelectedItemChanged()
{
    workCenter = comboboxWorkCenter.getSelectedItem()
    if(workCenter == null)
    {
        return
    }
    equipObjs = workCenter.getEquipment()
    comboboxEquip.setItems(equipObjs)
}

// 
// 选择行进行工单调整记录查看
function queryOrderChangeHis()
{
    defaultObj = activityGridResult.getSelectedRowObject()
    if(isNullOrEmpty(defaultObj))
    {
        handleErrorMsg("MES_MAINFROM_MSG_TRX", "SELECT_A_LINE", null, null, HANDLER_OPTION_DEFAULT, null)
        return
    }
    form = getForm("MES_OM_OrderChangeHis")
    setFormProperty(form,DEFAULT_OBJ,defaultObj)
    if(form != null)
    {
        showAsDialog(form)        
   }


}

//设置工序工单行颜色：：不是报工点行为灰色
function  changecolor(vectorData)
{
    for(i=0;i<vectorData.size();i++)
    {
        obj = vectorData.get(i)
        if(Long(obj[26])==10)
        {
            setRowColor(activityGridResultDay,i,COLOR_UNREOPRT)
        }
        if(Long(obj[16])==50)
        {
            setRowColor(activityGridResultDay,i,COLOR_STEPCLOSE)
        }
    
    }

}

//工序工单工序暂停
function  DeleteRuteStep()
{
    rows = activityGridResultDay.getNumberOfRows()   
   if(rows == 0)
   {
       dialogError("请选择一行记录！")
       return
   }else{
        for(i=0;i<rows;i++)
        {
            checked = activityGridResultDay.getCellObject(i, 0)
            if(checked == false){
                continue
            }else
            {
                order = getWorkOrder(editOrder.getText().trim())
                itemOrder = order.getOrderItem(activityGridResultDay.getCellText(i,3))
                if(Long(itemOrder.getUDA("order_status")) == 50)
                {
                    dialogError("工单已关闭，禁止任何操作")
                    return            
                }
                else
                {
                  itemOrder.setUDA(Long(50),"order_status")
                  order.save()
                }
            }
        }
   }  
    QueryOrderDay()
}

//调整车间 frmChangePline()

function  frmChangePline()
{
    rows = activityGridResultDay.getNumberOfRows()   
   if(rows == 0)
   {
       dialogError("请选择一行记录！")
       return
   }else{
        for(i=0;i<rows;i++)
        {
            checked = activityGridResultDay.getCellObject(i, 0)
            if(checked == false){
                continue
            }else
            {
               order = getWorkOrder(editOrder.getText().trim())
               itemOrder = order.getOrderItem(activityGridResultDay.getCellText(i,3))
               changeObject = [itemOrder,order]
               setProperty("changeObject",changeObject)
               form = getForm("MES_OM_AddOrdeSetpPlineChioce")
               closeFlag = showAsDialog(form)
               defaultObj = getProperty("objectADD")
               itemOrder.setUDA(getProductionLineByName(defaultObj[0]).getKey().toString(),"p_line_key")
               order.save()
            }
        }
   }  
    QueryOrderDay()
}

//手工创建 frmCreateOrderStep()
function  frmCreateOrderStep()
{
    order = getWorkOrder(editOrder.getText().trim())
    itemOrder=createOrderItem()
    itemOrder.setOrderItem(orderitemNo)
//     itemOrder.
      
      itemOrder = order.getOrderItem(activityGridResultDay.getCellText(i,3))
      
   
}